# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  gradle:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        id: checkout_code
        uses: actions/checkout@v2
      - name: Configure Java
        id: configure_java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Fix gradle wrapper
        id: fix_gradle_wrapper
        run: gradle wrapper
      - name: Publish artifact
        id: publish_artifact
        uses: eskatos/gradle-command-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          arguments: clean build bootJar publish
      - name: Rename artifact
        id: rename_artifact
        run: mv build/libs/*.jar build/libs/archesky-content-server-${GITHUB_RUN_ID}-SNAPSHOT.jar
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${GITHUB_RUN_ID}
          release_name: Release ${GITHUB_RUN_ID}
          body_path: README.md
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: build/libs/archesky-content-server-${GITHUB_RUN_ID}-SNAPSHOT.jar
          asset_name: archesky-content-server-${GITHUB_RUN_ID}-SNAPSHOT.jar
          asset_content_type: application/java-archive
