// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.pynguins.content.auth_microservice

import com.apollographql.apollo.api.*
import com.apollographql.apollo.api.ScalarTypeAdapters.DEFAULT
import com.apollographql.apollo.api.internal.*
import com.pynguins.content.auth_microservice.type.CustomType
import okio.BufferedSource
import java.io.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class CheckTokenQuery(
  val token: String
) : Query<CheckTokenQuery.Data, CheckTokenQuery.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["token"] = this@CheckTokenQuery.token
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller { writer ->
      writer.writeString("token", this@CheckTokenQuery.token)
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  data class Role(
    val __typename: String = "Role",
    val roleName: String,
    val roles: List<String>
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Role.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Role.roleName)
      writer.writeList(RESPONSE_FIELDS[2], this@Role.roles) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeString(value)}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("roleName", "roleName", null, false, CustomType.ID, null),
          ResponseField.forList("roles", "roles", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Role = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val roleName = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val roles = readList<String>(RESPONSE_FIELDS[2]) { reader ->
          reader.readString()}
        Role(
                __typename = __typename,
                roleName = roleName,
                roles = roles
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Role> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class CheckToken(
    val __typename: String = "Token",
    val username: String,
    val firstName: String?,
    val lastName: String?,
    val fullName: String?,
    val email: String?,
    val roles: List<Role>
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@CheckToken.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@CheckToken.username)
      writer.writeString(RESPONSE_FIELDS[2], this@CheckToken.firstName)
      writer.writeString(RESPONSE_FIELDS[3], this@CheckToken.lastName)
      writer.writeString(RESPONSE_FIELDS[4], this@CheckToken.fullName)
      writer.writeString(RESPONSE_FIELDS[5], this@CheckToken.email)
      writer.writeList(RESPONSE_FIELDS[6], this@CheckToken.roles) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("username", "username", null, false, null),
          ResponseField.forString("firstName", "firstName", null, true, null),
          ResponseField.forString("lastName", "lastName", null, true, null),
          ResponseField.forString("fullName", "fullName", null, true, null),
          ResponseField.forString("email", "email", null, true, null),
          ResponseField.forList("roles", "roles", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): CheckToken = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val username = readString(RESPONSE_FIELDS[1])
        val firstName = readString(RESPONSE_FIELDS[2])
        val lastName = readString(RESPONSE_FIELDS[3])
        val fullName = readString(RESPONSE_FIELDS[4])
        val email = readString(RESPONSE_FIELDS[5])
        val roles = readList<Role>(RESPONSE_FIELDS[6]) { reader ->
          reader.readObject<Role> { reader ->
            Role(reader)
          }
        }
        CheckToken(
                __typename = __typename,
                username = username,
                firstName = firstName,
                lastName = lastName,
                fullName = fullName,
                email = email,
                roles = roles
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<CheckToken> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Data(
    val checkToken: CheckToken
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.checkToken.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("checkToken", "checkToken", mapOf<String, Any>(
            "token" to mapOf<String, Any>(
              "kind" to "Variable",
              "variableName" to "token")), false, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val checkToken = readObject<CheckToken>(RESPONSE_FIELDS[0]) { reader ->
          CheckToken(reader)
        }
        Data(
                checkToken = checkToken
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "483f2364cfa36d956036def6d8222f833af7fba559fdf536dd611e84fafd3322"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query CheckToken(${'$'}token: String!) {
          |  checkToken(token: ${'$'}token) {
          |    __typename
          |    username
          |    firstName
          |    lastName
          |    fullName
          |    email
          |    roles {
          |      __typename
          |      roleName
          |      roles
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = OperationName { "CheckToken" }
  }
}
